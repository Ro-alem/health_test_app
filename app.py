import streamlit as st
import pandas as pd
from io import BytesIO
from fpdf import FPDF
from datetime import datetime

st.set_page_config(page_title="–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", layout="centered")

# –¢–µ—Å—Ç—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
tests_by_age = {
    0: [
        {"key": "Bayley Scales (BSID-III)", "min": 0, "max": 150},
        {"key": "ASQ-3 (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)", "min": 0, "max": 100},
        {"key": "M-CHAT-R/F", "min": 0, "max": 20}
    ],
    5: [
        {"key": "NEPSY-II (stens)", "min": 0, "max": 20},
        {"key": "KABC-II (IQ)", "min": 40, "max": 160},
        {"key": "CARS-2", "min": 0, "max": 60},
        {"key": "Conners EC (T)", "min": 0, "max": 100},
        {"key": "Stroop (—Å–µ–∫—É–Ω–¥—ã)", "min": 0, "max": 120},
        {"key": "WPPSI-IV (IQ)", "min": 40, "max": 160},
        {"key": "Vineland Adaptive", "min": 0, "max": 150}
    ],
    10: [
        {"key": "WISC-V (IQ)", "min": 40, "max": 160},
        {"key": "Stroop (—Å–µ–∫—É–Ω–¥—ã)", "min": 0, "max": 120},
        {"key": "CPT (–æ—à–∏–±–∫–∏ %)", "min": 0, "max": 100},
        {"key": "TMT A (—Å–µ–∫)", "min": 0, "max": 300},
        {"key": "TMT B (—Å–µ–∫)", "min": 0, "max": 300},
        {"key": "SRS-2 (T)", "min": 0, "max": 120},
        {"key": "RAVLT (—Å–ª–æ–≤)", "min": 0, "max": 15},
        {"key": "Tower of London (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", "min": 0, "max": 6},
        {"key": "Digit Span (—Ü–∏—Ñ—Ä—ã)", "min": 0, "max": 9}
    ],
    15: [
        {"key": "WCST (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", "min": 0, "max": 6},
        {"key": "TMT B (—Å–µ–∫)", "min": 0, "max": 180},
        {"key": "RAVLT (—Å–ª–æ–≤)", "min": 0, "max": 15},
        {"key": "PHQ-A (–±–∞–ª–ª—ã)", "min": 0, "max": 27},
        {"key": "CPT-II (–æ—à–∏–±–∫–∏ %)", "min": 0, "max": 100},
        {"key": "Tower of Hanoi (—Ö–æ–¥—ã)", "min": 0, "max": 25},
        {"key": "Emotional Stroop (—Ä–∞–∑–Ω–∏—Ü–∞ —Å–µ–∫)", "min": 0, "max": 120}
    ],
    18: [
        {"key": "MoCA (–±–∞–ª–ª—ã)", "min": 0, "max": 30},
        {"key": "WAIS-IV (IQ)", "min": 40, "max": 160},
        {"key": "WCST (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏)", "min": 0, "max": 6},
        {"key": "TMT B (—Å–µ–∫)", "min": 0, "max": 180},
        {"key": "Stroop (—Å–µ–∫—É–Ω–¥—ã/–æ—à–∏–±–∫–∏)", "min": 0, "max": 120},
        {"key": "GAD-7 (–±–∞–ª–ª—ã)", "min": 0, "max": 21},
        {"key": "BDI-II (–±–∞–ª–ª—ã)", "min": 0, "max": 63},
        {"key": "RAVLT (—Å–ª–æ–≤)", "min": 0, "max": 15}
    ]
}

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
recommendations = {
    0: {
        "–ù–æ—Ä–º–∞": "–†–∞–∑–≤–∏—Ç–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç—É. –°–µ–Ω—Å–æ—Ä–Ω—ã–µ –∏–≥—Ä—ã, –æ–±—â–µ–Ω–∏–µ, –º–∞—Å—Å–∞–∂.",
        "–†–∏—Å–∫": "–õ—ë–≥–∫–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Ä–µ—á–∏ –∏–ª–∏ –º–æ—Ç–æ—Ä–∏–∫–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ª–æ–≥–æ–ø–µ–¥–∞ –∏ –Ω–µ–≤—Ä–æ–ª–æ–≥–∞.",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤."
    },
    5: {
        "–ù–æ—Ä–º–∞": "–†–µ–±—ë–Ω–æ–∫ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–∏—è–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ –∏–≥—Ä—ã –∏ —á—Ç–µ–Ω–∏–µ.",
        "–†–∏—Å–∫": "–ï—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º. –£–º–µ–Ω—å—à–∏—Ç–µ —ç–∫—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ–ª–æ–≥—É.",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "–Ø–≤–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è. –ù—É–∂–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Å –ª–æ–≥–æ–ø–µ–¥–æ–º –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º."
    },
    10: {
        "–ù–æ—Ä–º–∞": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–º—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.",
        "–†–∏—Å–∫": "–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "–°–µ—Ä—å—ë–∑–Ω—ã–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ù—É–∂–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É –Ω–µ–≤—Ä–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞."
    },
    15: {
        "–ù–æ—Ä–º–∞": "–ü–æ–¥—Ä–æ—Å—Ç–æ–∫ –≤ –Ω–æ—Ä–º–µ. –í–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        "–†–∏—Å–∫": "–ï—Å—Ç—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –ü–æ—Å–æ–≤–µ—Ç—É–π—Ç–µ—Å—å —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º.",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. –°—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞."
    },
    18: {
        "–ù–æ—Ä–º–∞": "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∑—Ä–æ—Å–ª–æ–≥–æ –≤ –Ω–æ—Ä–º–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.",
        "–†–∏—Å–∫": "–ï—Å—Ç—å —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –ü–æ–º–æ–∂–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥.",
        "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è. –ù—É–∂–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å."
    }
}

# –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def compute_overall_level(age, entered):
    tests = tests_by_age[age]
    total_percent = 0.0
    for val, test in zip(entered, tests):
        maxv = test["max"]
        if maxv == 0:
            continue
        name = test["key"].lower()
        if any(x in name for x in ("m-chat", "cars", "gad", "bdi", "phq", "cpt", "stroop", "tmt")):
            pct = max(0.0, (maxv - val) / maxv) * 100.0
        else:
            pct = max(0.0, val / maxv) * 100.0
        total_percent += pct
    avg_percent = total_percent / len(tests) if tests else 0
    if avg_percent >= 75:
        return "–ù–æ—Ä–º–∞", avg_percent
    elif avg_percent >= 50:
        return "–†–∏—Å–∫", avg_percent
    else:
        return "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ", avg_percent

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üß† –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–º")

age = st.selectbox("–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç):", [0, 5, 10, 15, 18])

entered_values = []
cols = st.columns(2)
for i, test in enumerate(tests_by_age[age]):
    value = cols[i % 2].number_input(
        f"{test['key']} (–æ—Ç {test['min']} –¥–æ {test['max']})",
        min_value=test['min'], max_value=test['max'], value=test['min'], step=1
    )
    entered_values.append(value)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"):
    level, avg_percent = compute_overall_level(age, entered_values)

    color = {"–ù–æ—Ä–º–∞": "#28a745", "–†–∏—Å–∫": "#ffc107", "–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ": "#dc3545"}[level]
    st.markdown(f"<h3 style='color:{color}'>–ò—Ç–æ–≥: {level}</h3>", unsafe_allow_html=True)
    st.write(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_percent:.1f}%")
    st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:**", recommendations[age][level])

    df = pd.DataFrame([
        {"–¢–µ—Å—Ç": t["key"], "–†–µ–∑—É–ª—å—Ç–∞—Ç": v, "–ú–∞–∫—Å–∏–º—É–º": t["max"]}
        for t, v in zip(tests_by_age[age], entered_values)
    ])
    st.dataframe(df)

    # PDF –æ—Ç—á—ë—Ç
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, "–û—Ç—á—ë—Ç –ø–æ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ", ln=True, align="C")
    pdf.set_font("Arial", "", 12)
    pdf.cell(0, 10, f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç", ln=True)
    pdf.cell(0, 10, f"–ò—Ç–æ–≥: {level}", ln=True)
    pdf.cell(0, 10, f"–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: {avg_percent:.1f}%", ln=True)
    pdf.multi_cell(0, 8, f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendations[age][level]}")
    pdf.ln(5)
    for row in df.to_dict(orient="records"):
        pdf.cell(0, 8, f"{row['–¢–µ—Å—Ç']}: {row['–†–µ–∑—É–ª—å—Ç–∞—Ç']} / {row['–ú–∞–∫—Å–∏–º—É–º']}", ln=True)

    buffer = BytesIO()
    pdf.output(buffer)
    st.download_button(
        label="üìÑ –°–∫–∞—á–∞—Ç—å PDF –æ—Ç—á—ë—Ç",
        data=buffer.getvalue(),
        file_name=f"report_age_{age}.pdf",
        mime="application/pdf"
    )
